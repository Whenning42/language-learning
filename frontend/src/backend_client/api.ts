/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreatePlacementQuizRequest
 */
export interface CreatePlacementQuizRequest {
    /**
     * 
     * @type {number}
     * @memberof CreatePlacementQuizRequest
     */
    'user': number;
    /**
     * 
     * @type {Language}
     * @memberof CreatePlacementQuizRequest
     */
    'language': Language;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const Grade = {
    Correct: 'correct',
    Incorrect: 'incorrect'
} as const;

export type Grade = typeof Grade[keyof typeof Grade];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const Language = {
    TestLang: 'test_lang',
    DeDe: 'de_DE',
    FrFr: 'fr_FR',
    EnUs: 'en_US'
} as const;

export type Language = typeof Language[keyof typeof Language];


/**
 * 
 * @export
 * @interface PlacementQuiz
 */
export interface PlacementQuiz {
    /**
     * 
     * @type {number}
     * @memberof PlacementQuiz
     */
    'quiz_id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlacementQuiz
     */
    'user': number;
    /**
     * 
     * @type {Language}
     * @memberof PlacementQuiz
     */
    'language': Language;
    /**
     * 
     * @type {string}
     * @memberof PlacementQuiz
     */
    'start_time': string;
}


/**
 * 
 * @export
 * @interface PlacementQuizAnswer
 */
export interface PlacementQuizAnswer {
    /**
     * 
     * @type {number}
     * @memberof PlacementQuizAnswer
     */
    'answer_id'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof PlacementQuizAnswer
     */
    'quiz_id': number;
    /**
     * 
     * @type {number}
     * @memberof PlacementQuizAnswer
     */
    'question_num': number;
    /**
     * 
     * @type {string}
     * @memberof PlacementQuizAnswer
     */
    'word': string;
    /**
     * 
     * @type {Grade}
     * @memberof PlacementQuizAnswer
     */
    'grade': Grade;
    /**
     * 
     * @type {string}
     * @memberof PlacementQuizAnswer
     */
    'time'?: string | null;
}


/**
 * 
 * @export
 * @interface SampleWordResponse
 */
export interface SampleWordResponse {
    /**
     * 
     * @type {string}
     * @memberof SampleWordResponse
     */
    'word': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Placement Quiz
         * @param {CreatePlacementQuizRequest} createPlacementQuizRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlacementQuiz: async (createPlacementQuizRequest: CreatePlacementQuizRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPlacementQuizRequest' is not null or undefined
            assertParamExists('createPlacementQuiz', 'createPlacementQuizRequest', createPlacementQuizRequest)
            const localVarPath = `/placement-quizzes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPlacementQuizRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Placement Quiz Answer
         * @param {number} quizId 
         * @param {number} questionNum 
         * @param {PlacementQuizAnswer} placementQuizAnswer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlacementQuizAnswer: async (quizId: number, questionNum: number, placementQuizAnswer: PlacementQuizAnswer, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('createPlacementQuizAnswer', 'quizId', quizId)
            // verify required parameter 'questionNum' is not null or undefined
            assertParamExists('createPlacementQuizAnswer', 'questionNum', questionNum)
            // verify required parameter 'placementQuizAnswer' is not null or undefined
            assertParamExists('createPlacementQuizAnswer', 'placementQuizAnswer', placementQuizAnswer)
            const localVarPath = `/placement-quizzes/{quiz_id}/answers/{question_num}`
                .replace(`{${"quiz_id"}}`, encodeURIComponent(String(quizId)))
                .replace(`{${"question_num"}}`, encodeURIComponent(String(questionNum)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(placementQuizAnswer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sample Word
         * @param {number} quizId 
         * @param {number} questionNum 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sampleWord: async (quizId: number, questionNum: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quizId' is not null or undefined
            assertParamExists('sampleWord', 'quizId', quizId)
            // verify required parameter 'questionNum' is not null or undefined
            assertParamExists('sampleWord', 'questionNum', questionNum)
            const localVarPath = `/placement-quiz/sample-word`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quizId !== undefined) {
                localVarQueryParameter['quiz_id'] = quizId;
            }

            if (questionNum !== undefined) {
                localVarQueryParameter['question_num'] = questionNum;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Placement Quiz
         * @param {CreatePlacementQuizRequest} createPlacementQuizRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlacementQuiz(createPlacementQuizRequest: CreatePlacementQuizRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlacementQuiz>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlacementQuiz(createPlacementQuizRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPlacementQuiz']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Placement Quiz Answer
         * @param {number} quizId 
         * @param {number} questionNum 
         * @param {PlacementQuizAnswer} placementQuizAnswer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlacementQuizAnswer(quizId: number, questionNum: number, placementQuizAnswer: PlacementQuizAnswer, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlacementQuizAnswer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlacementQuizAnswer(quizId, questionNum, placementQuizAnswer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPlacementQuizAnswer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Sample Word
         * @param {number} quizId 
         * @param {number} questionNum 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sampleWord(quizId: number, questionNum: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SampleWordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sampleWord(quizId, questionNum, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.sampleWord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Placement Quiz
         * @param {CreatePlacementQuizRequest} createPlacementQuizRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlacementQuiz(createPlacementQuizRequest: CreatePlacementQuizRequest, options?: RawAxiosRequestConfig): AxiosPromise<PlacementQuiz> {
            return localVarFp.createPlacementQuiz(createPlacementQuizRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Placement Quiz Answer
         * @param {number} quizId 
         * @param {number} questionNum 
         * @param {PlacementQuizAnswer} placementQuizAnswer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlacementQuizAnswer(quizId: number, questionNum: number, placementQuizAnswer: PlacementQuizAnswer, options?: RawAxiosRequestConfig): AxiosPromise<PlacementQuizAnswer> {
            return localVarFp.createPlacementQuizAnswer(quizId, questionNum, placementQuizAnswer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sample Word
         * @param {number} quizId 
         * @param {number} questionNum 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sampleWord(quizId: number, questionNum: number, options?: RawAxiosRequestConfig): AxiosPromise<SampleWordResponse> {
            return localVarFp.sampleWord(quizId, questionNum, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Placement Quiz
     * @param {CreatePlacementQuizRequest} createPlacementQuizRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPlacementQuiz(createPlacementQuizRequest: CreatePlacementQuizRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPlacementQuiz(createPlacementQuizRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Placement Quiz Answer
     * @param {number} quizId 
     * @param {number} questionNum 
     * @param {PlacementQuizAnswer} placementQuizAnswer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPlacementQuizAnswer(quizId: number, questionNum: number, placementQuizAnswer: PlacementQuizAnswer, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPlacementQuizAnswer(quizId, questionNum, placementQuizAnswer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sample Word
     * @param {number} quizId 
     * @param {number} questionNum 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public sampleWord(quizId: number, questionNum: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).sampleWord(quizId, questionNum, options).then((request) => request(this.axios, this.basePath));
    }
}



